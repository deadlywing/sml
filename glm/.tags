!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABC	.\utils\link.py	/^from abc import ABC, abstractmethod$/;"	i
ABC	.\utils\solver.py	/^from abc import ABC, abstractmethod$/;"	i
BaseEstimator	.\ref\sklearn_glm.py	/^from ...base import BaseEstimator, RegressorMixin, _fit_context$/;"	i
BaseLink	.\utils\link.py	/^class BaseLink(ABC):$/;"	c
BaseLoss	.\utils\loss.py	/^class BaseLoss:$/;"	c
DEBUG	.\glm.py	/^DEBUG = 0$/;"	v
DEBUG	.\utils\solver.py	/^DEBUG = 0$/;"	v
ExpLink	.\utils\link.py	/^class ExpLink(BaseLink):$/;"	c
GammaRegressor	.\glm.py	/^class GammaRegressor(_GeneralizedLinearRegressor):$/;"	c
GammaRegressor	.\glm_emul.py	/^from glm import _GeneralizedLinearRegressor, PoissonRegressor, GammaRegressor, TweedieRegressor$/;"	i
GammaRegressor	.\glm_test.py	/^from glm import _GeneralizedLinearRegressor, PoissonRegressor, GammaRegressor, TweedieRegressor$/;"	i
GammaRegressor	.\ref\sklearn_glm.py	/^class GammaRegressor(_GeneralizedLinearRegressor):$/;"	c
HalfGammaLoss	.\utils\loss.py	/^class HalfGammaLoss(BaseLoss):$/;"	c
HalfPoissonLoss	.\utils\loss.py	/^class HalfPoissonLoss(BaseLoss):$/;"	c
HalfSquaredLoss	.\utils\loss.py	/^class HalfSquaredLoss(BaseLoss):$/;"	c
HalfTweedieLoss	.\utils\loss.py	/^class HalfTweedieLoss(BaseLoss):$/;"	c
Hidden	.\ref\sklearn_glm.py	/^from ...utils._param_validation import Hidden, Interval, StrOptions$/;"	i
IdentityLink	.\utils\link.py	/^class IdentityLink(BaseLink):$/;"	c
Integral	.\ref\sklearn_glm.py	/^from numbers import Integral, Real$/;"	i
Interval	.\ref\sklearn_glm.py	/^from ...utils._param_validation import Hidden, Interval, StrOptions$/;"	i
Interval	.\utils\link.py	/^class Interval:$/;"	c
LBFGSSolver	.\utils\solver.py	/^class LBFGSSolver(Solver):$/;"	c
LinearModelLoss	.\ref\sklearn_glm.py	/^from .._linear_loss import LinearModelLoss$/;"	i
LogLink	.\utils\link.py	/^class LogLink(BaseLink):$/;"	c
NewtonCholeskySolver	.\ref\sklearn_glm.py	/^from ._newton_solver import NewtonCholeskySolver, NewtonSolver$/;"	i
NewtonCholeskySolver	.\utils\solver.py	/^class NewtonCholeskySolver(Solver):$/;"	c
NewtonSolver	.\ref\sklearn_glm.py	/^from ._newton_solver import NewtonCholeskySolver, NewtonSolver$/;"	i
PoissonRegressor	.\glm.py	/^class PoissonRegressor(_GeneralizedLinearRegressor):$/;"	c
PoissonRegressor	.\glm_emul.py	/^from glm import _GeneralizedLinearRegressor, PoissonRegressor, GammaRegressor, TweedieRegressor$/;"	i
PoissonRegressor	.\glm_test.py	/^from glm import _GeneralizedLinearRegressor, PoissonRegressor, GammaRegressor, TweedieRegressor$/;"	i
PoissonRegressor	.\ref\sklearn_glm.py	/^class PoissonRegressor(_GeneralizedLinearRegressor):$/;"	c
Real	.\ref\sklearn_glm.py	/^from numbers import Integral, Real$/;"	i
RegressorMixin	.\ref\sklearn_glm.py	/^from ...base import BaseEstimator, RegressorMixin, _fit_context$/;"	i
Solver	.\utils\solver.py	/^class Solver(ABC):$/;"	c
StrOptions	.\ref\sklearn_glm.py	/^from ...utils._param_validation import Hidden, Interval, StrOptions$/;"	i
TestGeneralizedLinearRegressor	.\glm_test.py	/^class TestGeneralizedLinearRegressor(unittest.TestCase):$/;"	c
TweedieRegressor	.\glm.py	/^class TweedieRegressor(_GeneralizedLinearRegressor):$/;"	c
TweedieRegressor	.\glm_emul.py	/^from glm import _GeneralizedLinearRegressor, PoissonRegressor, GammaRegressor, TweedieRegressor$/;"	i
TweedieRegressor	.\glm_test.py	/^from glm import _GeneralizedLinearRegressor, PoissonRegressor, GammaRegressor, TweedieRegressor$/;"	i
TweedieRegressor	.\ref\sklearn_glm.py	/^class TweedieRegressor(_GeneralizedLinearRegressor):$/;"	c
_GeneralizedLinearRegressor	.\glm.py	/^class _GeneralizedLinearRegressor:$/;"	c
_GeneralizedLinearRegressor	.\glm_emul.py	/^from glm import _GeneralizedLinearRegressor, PoissonRegressor, GammaRegressor, TweedieRegressor$/;"	i
_GeneralizedLinearRegressor	.\glm_test.py	/^from glm import _GeneralizedLinearRegressor, PoissonRegressor, GammaRegressor, TweedieRegressor$/;"	i
_GeneralizedLinearRegressor	.\gtest.py	/^        from glm import _GeneralizedLinearRegressor$/;"	i
_GeneralizedLinearRegressor	.\gtest.py	/^    from glm import _GeneralizedLinearRegressor$/;"	i
_GeneralizedLinearRegressor	.\ref\sklearn_glm.py	/^class _GeneralizedLinearRegressor(RegressorMixin, BaseEstimator):$/;"	c
__call__	.\utils\loss.py	/^    def __call__(self, y_true, y_pred):$/;"	m	class:HalfGammaLoss	file:
__call__	.\utils\loss.py	/^    def __call__(self, y_true, y_pred):$/;"	m	class:HalfPoissonLoss	file:
__call__	.\utils\loss.py	/^    def __call__(self, y_true, y_pred):$/;"	m	class:HalfSquaredLoss	file:
__call__	.\utils\loss.py	/^    def __call__(self, y_true, y_pred):$/;"	m	class:HalfTweedieLoss	file:
__call__	.\utils\loss.py	/^    def __call__(self, y_true, y_pred, loss_single_sample):$/;"	m	class:BaseLoss	file:
__init__	.\glm.py	/^    def __init__($/;"	m	class:TweedieRegressor
__init__	.\glm.py	/^    def __init__(self,$/;"	m	class:_GeneralizedLinearRegressor
__init__	.\ref\sklearn_glm.py	/^    def __init__($/;"	m	class:GammaRegressor
__init__	.\ref\sklearn_glm.py	/^    def __init__($/;"	m	class:PoissonRegressor
__init__	.\ref\sklearn_glm.py	/^    def __init__($/;"	m	class:TweedieRegressor
__init__	.\ref\sklearn_glm.py	/^    def __init__($/;"	m	class:_GeneralizedLinearRegressor
__init__	.\utils\loss.py	/^    def __init__(self, power):$/;"	m	class:HalfTweedieLoss
__init__	.\utils\solver.py	/^    def __init__(self,$/;"	m	class:LBFGSSolver
__init__	.\utils\solver.py	/^    def __init__(self,$/;"	m	class:NewtonCholeskySolver
__init__	.\utils\solver.py	/^    def __init__(self,$/;"	m	class:Solver
__post_init__	.\utils\link.py	/^    def __post_init__(self):$/;"	m	class:Interval	file:
_check_optimize_result	.\ref\sklearn_glm.py	/^from ...utils.optimize import _check_optimize_result$/;"	i
_check_sample_weight	.\ref\sklearn_glm.py	/^from ...utils.validation import _check_sample_weight, check_is_fitted$/;"	i
_check_sample_weight	.\utils\func.py	/^def _check_sample_weight(X, sample_weight):$/;"	f
_check_solver_support	.\glm.py	/^    def _check_solver_support(self):$/;"	m	class:_GeneralizedLinearRegressor
_fit_context	.\ref\sklearn_glm.py	/^from ...base import BaseEstimator, RegressorMixin, _fit_context$/;"	i
_fit_lbfgs	.\glm.py	/^    def _fit_lbfgs(self, X, y):$/;"	m	class:_GeneralizedLinearRegressor
_fit_newton_cholesky	.\glm.py	/^    def _fit_newton_cholesky(self, X, y):$/;"	m	class:_GeneralizedLinearRegressor
_get_link	.\glm.py	/^    def _get_link(self):$/;"	m	class:GammaRegressor
_get_link	.\glm.py	/^    def _get_link(self):$/;"	m	class:PoissonRegressor
_get_link	.\glm.py	/^    def _get_link(self):$/;"	m	class:TweedieRegressor
_get_link	.\glm.py	/^    def _get_link(self):$/;"	m	class:_GeneralizedLinearRegressor
_get_loss	.\glm.py	/^    def _get_loss(self):$/;"	m	class:GammaRegressor
_get_loss	.\glm.py	/^    def _get_loss(self):$/;"	m	class:PoissonRegressor
_get_loss	.\glm.py	/^    def _get_loss(self):$/;"	m	class:TweedieRegressor
_get_loss	.\glm.py	/^    def _get_loss(self):$/;"	m	class:_GeneralizedLinearRegressor
_get_loss	.\ref\sklearn_glm.py	/^    def _get_loss(self):$/;"	m	class:GammaRegressor
_get_loss	.\ref\sklearn_glm.py	/^    def _get_loss(self):$/;"	m	class:PoissonRegressor
_get_loss	.\ref\sklearn_glm.py	/^    def _get_loss(self):$/;"	m	class:TweedieRegressor
_get_loss	.\ref\sklearn_glm.py	/^    def _get_loss(self):$/;"	m	class:_GeneralizedLinearRegressor
_line_search	.\utils\solver.py	/^    def _line_search(self, p_k, f_k, g_k):$/;"	m	class:LBFGSSolver
_linear_predictor	.\ref\sklearn_glm.py	/^    def _linear_predictor(self, X):$/;"	m	class:_GeneralizedLinearRegressor
_more_tags	.\ref\sklearn_glm.py	/^    def _more_tags(self):$/;"	m	class:_GeneralizedLinearRegressor
_openmp_effective_n_threads	.\ref\sklearn_glm.py	/^from ...utils._openmp_helpers import _openmp_effective_n_threads$/;"	i
_two_loop_recursion	.\utils\solver.py	/^    def _two_loop_recursion(self, g_k):$/;"	m	class:LBFGSSolver
abstractmethod	.\utils\link.py	/^from abc import ABC, abstractmethod$/;"	i
abstractmethod	.\utils\solver.py	/^from abc import ABC, abstractmethod$/;"	i
check_array	.\ref\sklearn_glm.py	/^from ...utils import check_array$/;"	i
check_is_fitted	.\ref\sklearn_glm.py	/^from ...utils.validation import _check_sample_weight, check_is_fitted$/;"	i
cho_factor	.\utils\solver.py	/^from jax.scipy.linalg import cho_solve, cho_factor$/;"	i
cho_solve	.\utils\solver.py	/^from jax.scipy.linalg import cho_solve, cho_factor$/;"	i
cho_solve_wrapper	.\utils\solver.py	/^        def cho_solve_wrapper(a, b):$/;"	f	function:NewtonCholeskySolver.solve
dataclass	.\utils\link.py	/^from dataclasses import dataclass$/;"	i
emul_SGDClassifier	.\glm_emul.py	/^def emul_SGDClassifier(mode: emulation.Mode.MULTIPROCESS, num=5):$/;"	f
emulation	.\glm_emul.py	/^import sml.utils.emulation as emulation$/;"	i
fit	.\glm.py	/^    def fit(self, X, y, sample_weight=None):$/;"	m	class:_GeneralizedLinearRegressor
fit	.\ref\sklearn_glm.py	/^    def fit(self, X, y, sample_weight=None):$/;"	m	class:_GeneralizedLinearRegressor
generate_data	.\gtest.py	/^def generate_data(noise=False):$/;"	f
get_sampleweight	.\utils\loss.py	/^    def get_sampleweight(self, sample_weight):$/;"	m	class:BaseLoss
includes	.\utils\link.py	/^    def includes(self, x):$/;"	m	class:Interval
inspect	.\glm_test.py	/^import inspect$/;"	i
interval_y_pred	.\utils\link.py	/^    interval_y_pred = Interval(-jnp.inf, jnp.inf, False, False)$/;"	v	class:BaseLink
interval_y_pred	.\utils\link.py	/^    interval_y_pred = Interval(0, jnp.inf, False, False)$/;"	v	class:LogLink
inverse	.\utils\link.py	/^    def inverse(self, raw_prediction):$/;"	m	class:ExpLink
inverse	.\utils\link.py	/^    def inverse(self, raw_prediction, out=None):$/;"	m	class:BaseLink
inverse	.\utils\link.py	/^    def inverse(self, raw_prediction, out=None):$/;"	m	class:IdentityLink
inverse	.\utils\link.py	/^    def inverse(self, raw_prediction, out=None):$/;"	m	class:LogLink
iteration	.\utils\solver.py	/^    def iteration(self):$/;"	m	class:Solver
jax	.\glm.py	/^import jax$/;"	i
jax	.\glm.py	/^import jax.numpy as jnp$/;"	i
jax	.\glm_emul.py	/^import jax.numpy as jnp$/;"	i
jax	.\glm_test.py	/^import jax.numpy as jnp$/;"	i
jax	.\utils\link.py	/^import jax.numpy as jnp$/;"	i
jax	.\utils\loss.py	/^import jax$/;"	i
jax	.\utils\loss.py	/^import jax.numpy as jnp$/;"	i
jax	.\utils\solver.py	/^import jax$/;"	i
jax	.\utils\solver.py	/^import jax.numpy as jnp$/;"	i
jit	.\utils\solver.py	/^from jax import vmap, jit$/;"	i
jnp	.\glm.py	/^import jax.numpy as jnp$/;"	i
jnp	.\glm_emul.py	/^import jax.numpy as jnp$/;"	i
jnp	.\glm_test.py	/^import jax.numpy as jnp$/;"	i
jnp	.\utils\link.py	/^import jax.numpy as jnp$/;"	i
jnp	.\utils\loss.py	/^import jax.numpy as jnp$/;"	i
jnp	.\utils\solver.py	/^import jax.numpy as jnp$/;"	i
link	.\utils\link.py	/^    def link(self, y_pred, out=None):$/;"	m	class:BaseLink
link	.\utils\link.py	/^    def link(self, y_pred, out=None):$/;"	m	class:ExpLink
link	.\utils\link.py	/^    def link(self, y_pred, out=None):$/;"	m	class:IdentityLink
link	.\utils\link.py	/^    def link(self, y_pred, out=None):$/;"	m	class:LogLink
loss_single_sample	.\utils\loss.py	/^        def loss_single_sample(y_t, y_p):$/;"	f	function:HalfGammaLoss.__call__
loss_single_sample	.\utils\loss.py	/^        def loss_single_sample(y_t, y_p):$/;"	f	function:HalfPoissonLoss.__call__
loss_single_sample	.\utils\loss.py	/^        def loss_single_sample(y_t, y_p):$/;"	f	function:HalfSquaredLoss.__call__
loss_single_sample	.\utils\loss.py	/^        def loss_single_sample(y_t, y_p):$/;"	f	function:HalfTweedieLoss.__call__
np	.\glm_emul.py	/^import numpy as np$/;"	i
np	.\gtest.py	/^import numpy as np$/;"	i
np	.\ref\sklearn_glm.py	/^import numpy as np$/;"	i
np	.\utils\func.py	/^import numpy as np$/;"	i
optimize	.\ref\sklearn_glm.py	/^import scipy.optimize$/;"	i
os	.\glm.py	/^import os$/;"	i
os	.\glm_emul.py	/^import os$/;"	i
ppd	.\glm_emul.py	/^import spu.utils.distributed as ppd$/;"	i
predict	.\glm.py	/^    def predict(self, X):$/;"	m	class:_GeneralizedLinearRegressor
predict	.\ref\sklearn_glm.py	/^    def predict(self, X):$/;"	m	class:_GeneralizedLinearRegressor
predict	.\utils\solver.py	/^    def predict(self, X):$/;"	m	class:Solver
proc	.\gtest.py	/^    def proc(X, y):$/;"	f	function:test_sim
proc_ncSolver	.\glm_emul.py	/^    def proc_ncSolver(x1, x2, y):$/;"	f	function:emul_SGDClassifier
proc_ncSolver	.\glm_test.py	/^        def proc_ncSolver():$/;"	f	function:TestGeneralizedLinearRegressor.test_fit_predict
proc_test	.\glm_test.py	/^        def proc_test(proc):$/;"	f	function:TestGeneralizedLinearRegressor.test_fit_predict
quadratic_model	.\utils\solver.py	/^        def quadratic_model(a):$/;"	f	function:LBFGSSolver._line_search
random	.\glm.py	/^from jax import random$/;"	i
random	.\glm_test.py	/^from jax import random$/;"	i
scipy	.\gtest.py	/^import scipy.stats as stats$/;"	i
scipy	.\ref\sklearn_glm.py	/^import scipy.optimize$/;"	i
score	.\glm.py	/^    def score(self, X, y, sample_weight=None):$/;"	m	class:_GeneralizedLinearRegressor
score	.\ref\sklearn_glm.py	/^    def score(self, X, y, sample_weight=None):$/;"	m	class:_GeneralizedLinearRegressor
setUp	.\glm_test.py	/^    def setUp(self):$/;"	m	class:TestGeneralizedLinearRegressor
sml	.\glm_emul.py	/^import sml.utils.emulation as emulation$/;"	i
solve	.\utils\solver.py	/^    def solve(self, X, y, sample_weight=None):$/;"	m	class:LBFGSSolver
solve	.\utils\solver.py	/^    def solve(self, X, y, sample_weight=None):$/;"	m	class:NewtonCholeskySolver
solve	.\utils\solver.py	/^    def solve(self, X, y, sample_weight=None):$/;"	m	class:Solver
spsim	.\glm_test.py	/^import spu.utils.simulation as spsim$/;"	i
spsim	.\gtest.py	/^import spu.utils.simulation as spsim$/;"	i
spu	.\glm_emul.py	/^import spu.utils.distributed as ppd$/;"	i
spu	.\glm_test.py	/^import spu.spu_pb2 as spu_pb2$/;"	i
spu	.\glm_test.py	/^import spu.utils.simulation as spsim$/;"	i
spu	.\gtest.py	/^import spu.spu_pb2 as spu_pb2$/;"	i
spu	.\gtest.py	/^import spu.utils.simulation as spsim$/;"	i
spu_pb2	.\glm_test.py	/^import spu.spu_pb2 as spu_pb2$/;"	i
spu_pb2	.\gtest.py	/^import spu.spu_pb2 as spu_pb2$/;"	i
stats	.\gtest.py	/^import scipy.stats as stats$/;"	i
sys	.\glm_emul.py	/^import sys$/;"	i
test	.\gtest.py	/^def test(model, X, y, coef, sample_weight=None, num=5):$/;"	f
test_Gamma	.\glm_test.py	/^        def test_Gamma():$/;"	f	function:TestGeneralizedLinearRegressor.test_fit_predict
test_Poisson	.\glm_test.py	/^        def test_Poisson():$/;"	f	function:TestGeneralizedLinearRegressor.test_fit_predict
test_Poisson	.\gtest.py	/^def test_Poisson():$/;"	f
test_Tweedie	.\glm_test.py	/^        def test_Tweedie():$/;"	f	function:TestGeneralizedLinearRegressor.test_fit_predict
test_Tweedie	.\gtest.py	/^def test_Tweedie():$/;"	f
test_fit_predict	.\glm_test.py	/^    def test_fit_predict(self):$/;"	m	class:TestGeneralizedLinearRegressor
test_gamma	.\gtest.py	/^def test_gamma():$/;"	f
test_glm	.\gtest.py	/^def test_glm():$/;"	f
test_lbfgs	.\gtest.py	/^def test_lbfgs():$/;"	f
test_sim	.\gtest.py	/^def test_sim():$/;"	f
unittest	.\glm_test.py	/^import unittest$/;"	i
utils	.\glm_emul.py	/^import sml.utils.emulation as emulation$/;"	i
utils	.\glm_emul.py	/^import spu.utils.distributed as ppd$/;"	i
utils	.\glm_test.py	/^import spu.utils.simulation as spsim$/;"	i
utils	.\gtest.py	/^import spu.utils.simulation as spsim$/;"	i
vmap	.\utils\solver.py	/^from jax import vmap, jit$/;"	i
warnings	.\glm.py	/^import warnings$/;"	i
