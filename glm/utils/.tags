!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABC	.\link.py	/^from abc import ABC, abstractmethod$/;"	i
ABC	.\solver.py	/^from abc import ABC, abstractmethod$/;"	i
BaseLink	.\link.py	/^class BaseLink(ABC):$/;"	c
BaseLoss	.\loss.py	/^class BaseLoss:$/;"	c
DEBUG	.\solver.py	/^DEBUG = 0$/;"	v
ExpLink	.\link.py	/^class ExpLink(BaseLink):$/;"	c
HalfGammaLoss	.\loss.py	/^class HalfGammaLoss(BaseLoss):$/;"	c
HalfPoissonLoss	.\loss.py	/^class HalfPoissonLoss(BaseLoss):$/;"	c
HalfSquaredLoss	.\loss.py	/^class HalfSquaredLoss(BaseLoss):$/;"	c
HalfTweedieLoss	.\loss.py	/^class HalfTweedieLoss(BaseLoss):$/;"	c
IdentityLink	.\link.py	/^class IdentityLink(BaseLink):$/;"	c
Interval	.\link.py	/^class Interval:$/;"	c
LBFGSSolver	.\solver.py	/^class LBFGSSolver(Solver):$/;"	c
LogLink	.\link.py	/^class LogLink(BaseLink):$/;"	c
NewtonCholeskySolver	.\solver.py	/^class NewtonCholeskySolver(Solver):$/;"	c
Solver	.\solver.py	/^class Solver(ABC):$/;"	c
__call__	.\loss.py	/^    def __call__(self, y_true, y_pred):$/;"	m	class:HalfGammaLoss	file:
__call__	.\loss.py	/^    def __call__(self, y_true, y_pred):$/;"	m	class:HalfPoissonLoss	file:
__call__	.\loss.py	/^    def __call__(self, y_true, y_pred):$/;"	m	class:HalfSquaredLoss	file:
__call__	.\loss.py	/^    def __call__(self, y_true, y_pred):$/;"	m	class:HalfTweedieLoss	file:
__call__	.\loss.py	/^    def __call__(self, y_true, y_pred, loss_single_sample):$/;"	m	class:BaseLoss	file:
__init__	.\loss.py	/^    def __init__(self, n_threads=1):$/;"	m	class:BaseLoss
__init__	.\loss.py	/^    def __init__(self, power):$/;"	m	class:HalfTweedieLoss
__init__	.\solver.py	/^    def __init__(self,$/;"	m	class:LBFGSSolver
__init__	.\solver.py	/^    def __init__(self,$/;"	m	class:NewtonCholeskySolver
__init__	.\solver.py	/^    def __init__(self,$/;"	m	class:Solver
__post_init__	.\link.py	/^    def __post_init__(self):$/;"	m	class:Interval	file:
_check_sample_weight	.\func.py	/^def _check_sample_weight(X, sample_weight):$/;"	f
_line_search	.\solver.py	/^    def _line_search(self, p_k, f_k, g_k):$/;"	m	class:LBFGSSolver
_two_loop_recursion	.\solver.py	/^    def _two_loop_recursion(self, g_k):$/;"	m	class:LBFGSSolver
abstractmethod	.\link.py	/^from abc import ABC, abstractmethod$/;"	i
abstractmethod	.\solver.py	/^from abc import ABC, abstractmethod$/;"	i
cho_factor	.\solver.py	/^from jax.scipy.linalg import cho_solve, cho_factor$/;"	i
cho_solve	.\solver.py	/^from jax.scipy.linalg import cho_solve, cho_factor$/;"	i
cho_solve_wrapper	.\solver.py	/^        def cho_solve_wrapper(a, b):$/;"	f	function:NewtonCholeskySolver.solve
dataclass	.\link.py	/^from dataclasses import dataclass$/;"	i
get_sampleweight	.\loss.py	/^    def get_sampleweight(self, sample_weight):$/;"	m	class:BaseLoss
includes	.\link.py	/^    def includes(self, x):$/;"	m	class:Interval
interval_y_pred	.\link.py	/^    interval_y_pred = Interval(-jnp.inf, jnp.inf, False, False)$/;"	v	class:BaseLink
interval_y_pred	.\link.py	/^    interval_y_pred = Interval(0, jnp.inf, False, False)$/;"	v	class:LogLink
inverse	.\link.py	/^    def inverse(self, raw_prediction):$/;"	m	class:ExpLink
inverse	.\link.py	/^    def inverse(self, raw_prediction, out=None):$/;"	m	class:BaseLink
inverse	.\link.py	/^    def inverse(self, raw_prediction, out=None):$/;"	m	class:IdentityLink
inverse	.\link.py	/^    def inverse(self, raw_prediction, out=None):$/;"	m	class:LogLink
iteration	.\solver.py	/^    def iteration(self):$/;"	m	class:Solver
jax	.\link.py	/^import jax.numpy as jnp$/;"	i
jax	.\loss.py	/^import jax$/;"	i
jax	.\loss.py	/^import jax.numpy as jnp$/;"	i
jax	.\solver.py	/^import jax$/;"	i
jax	.\solver.py	/^import jax.numpy as jnp$/;"	i
jit	.\solver.py	/^from jax import vmap, jit$/;"	i
jnp	.\link.py	/^import jax.numpy as jnp$/;"	i
jnp	.\loss.py	/^import jax.numpy as jnp$/;"	i
jnp	.\solver.py	/^import jax.numpy as jnp$/;"	i
link	.\link.py	/^    def link(self, y_pred, out=None):$/;"	m	class:BaseLink
link	.\link.py	/^    def link(self, y_pred, out=None):$/;"	m	class:ExpLink
link	.\link.py	/^    def link(self, y_pred, out=None):$/;"	m	class:IdentityLink
link	.\link.py	/^    def link(self, y_pred, out=None):$/;"	m	class:LogLink
loss_single_sample	.\loss.py	/^        def loss_single_sample(y_t, y_p, w):$/;"	f	function:HalfGammaLoss.__call__
loss_single_sample	.\loss.py	/^        def loss_single_sample(y_t, y_p, w):$/;"	f	function:HalfPoissonLoss.__call__
loss_single_sample	.\loss.py	/^        def loss_single_sample(y_t, y_p, w):$/;"	f	function:HalfSquaredLoss.__call__
loss_single_sample	.\loss.py	/^        def loss_single_sample(y_t, y_p, w):$/;"	f	function:HalfTweedieLoss.__call__
np	.\func.py	/^import numpy as np$/;"	i
predict	.\solver.py	/^    def predict(self, X):$/;"	m	class:Solver
quadratic_model	.\solver.py	/^        def quadratic_model(a):$/;"	f	function:LBFGSSolver._line_search
solve	.\solver.py	/^    def solve(self, X, y, sample_weight=None):$/;"	m	class:LBFGSSolver
solve	.\solver.py	/^    def solve(self, X, y, sample_weight=None):$/;"	m	class:NewtonCholeskySolver
solve	.\solver.py	/^    def solve(self, X, y, sample_weight=None):$/;"	m	class:Solver
vmap	.\solver.py	/^from jax import vmap, jit$/;"	i
